#Critical value = 1.833113
-qt(0.05,9)
#p-value= P(t_9 > -1.833113) = 0.8477406
pt(-t_stat,9)
#2b
library(e1071)
skewness(rdi_vec)
skewness(rdi_vec, type = 1)
skewness(rdi_vec, type = 2)
#2c
#beta1 = r * sd(y) / sd(x)
sodium = c(280,977,1551,708,981,1045,929,1729,121,765)
mean(sodium)
sd(sodium)
#2c
#beta1 = r * sd(y) / sd(x)
sodium = c(280,877,1551,708,981,1045,929,1729,121,765)
mean(sodium)
sd(sodium)
fat = c(2,4,15,6,10,10,16,23,2,3)
mean(fat)
sd(fat)
lm(fat ~ sodium)$coef
lm(fat ~ sodium)$coef[2]
r_coef = corr(sodium,fat)
r_coef = cor(sodium,fat)
r_coef
r_coef * sd(fat) / sd(sodium)
sd(sodium)
sd(fat)
r_coef = cor(sodium,fat)
r_coef
lm(fat ~ sodium)$coef[2]
r_coef * sd(fat) / sd(sodium)
r_coef
#2d
coles = c(4.74, 4.63, 3.16, 4.33, 2.93, 3.63, 4.18)
wws = c(4.74, 4.04, 4.75, 2.69, 4.19, 4.48, 4.90)
#Pooled variance
var(wws) / var(coles)
#
sp2 = (6*var(coles) + 6*var(wws)) / 12
#
mean(wws) - mean(coles) - qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
mean(wws) - mean(coles) + qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
mean(wws)
mean(coles)
sd(coles)
sd(wws)
#2a
rdi_vec = c(33,27,84,14,77,35,22,47,69,56)
mean(rdi_vec)
sd(rdi_vec)
n=10
barx = mean(rdi_vec)
sample_sd = sd(rdi_vec)
t_stat = (barx - 50)/ (sample_sd/ sqrt(n))
#test stat = -1.088843
t_stat
mean(rdi_vec)
sd(rdi_vec)
t_stat = (barx - 50)/ (sample_sd/ sqrt(n))
#test stat = -1.088843
t_stat
#Critical value = 1.833113
-qt(0.05,9)
#p-value= P(t_9 > -1.833113) = 0.8477406
pt(-t_stat,9)
#2b
library(e1071)
skewness(rdi_vec, type = 2)
#2c
#beta1 = r * sd(y) / sd(x)
sodium = c(658,542,1687,289,1422,706,430,947,1378,1117)
mean(sodium)
sd(sodium)
fat = c(6,18,7,4,9,7,4,1,11,15)
mean(fat)
sd(fat)
r_coef = cor(sodium,fat)
r_coef
lm(fat ~ sodium)$coef[2]
r_coef * sd(fat) / sd(sodium)
#2d
coles = c(4.89, 4.25, 4.70, 3.71, 4.72, 4.36, 3.21)
wws = c(2.60, 3.07, 4.79, 4.93, 3.88, 4.97, 3.85)
#Pooled variance
var(wws) / var(coles)
#
sp2 = (6*var(coles) + 6*var(wws)) / 12
#
mean(wws) - mean(coles) - qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
mean(wws) - mean(coles) + qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
mean(coles)
mean(coles); sd(coles)
mean(coles); sd(coles)
mean(wws); sd(wws)
mean(coles) - mean(wws)
sp2
var(wws) / var(coles)
sp2
qt(0.95, 12)
mean(wws) - mean(coles) - qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7));mean(wws) - mean(coles) + qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
#2a
rdi_vec = c(60,20,68,12,75,60,19,76,40,59)
barx = mean(rdi_vec)
sample_sd = sd(rdi_vec)
mean(rdi_vec)
sd(rdi_vec)
n=10
barx = mean(rdi_vec)
sample_sd = sd(rdi_vec)
t_stat = (barx - 50)/ (sample_sd/ sqrt(n))
#test stat = -1.088843
t_stat
#Critical value = 1.833113
-qt(0.05,9)
#p-value= P(t_9 > -1.833113) = 0.8477406
pt(-t_stat,9)
#2b
skewness(rdi_vec, type = 2)
#2c
#beta1 = r * sd(y) / sd(x)
sodium = c(1206,391,1364,242,1505,1197,372,1580,791,1183)
mean(sodium)
sd(sodium)
fat = c(23,8,15,4,14,6,4,11,6,4)
mean(fat)
sd(fat)
r_coef = cor(sodium,fat)
r_coef
#2d
coles = c(4.87, 4.53, 3.52, 3.92, 4.32, 4.11, 2.89)
wws = c(4.10, 2.91, 3.90, 4.68, 4.73, 4.89, 2.78)
#Pooled variance
var(wws) / var(coles)
#
sp2 = (6*var(coles) + 6*var(wws)) / 12
#
mean(wws) - mean(coles) - qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
#2d
coles = c(4.87, 4.53, 3.52, 3.92, 4.32, 4.11, 2.89)
wws = c(4.10, 2.91, 3.90, 4.68, 4.73, 4.89, 2.78)
#Pooled variance
var(wws) / var(coles)
#
sp2 = (6*var(coles) + 6*var(wws)) / 12
#
mean(wws) - mean(coles) - qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
mean(wws) - mean(coles) + qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
mean(coles); sd(coles)
mean(wws); sd(wws)
mean(coles) - mean(wws)
var(wws) / var(coles)
sp2
qt(0.95, 12)
mean(wws) - mean(coles) - qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7));mean(wws) - mean(coles) + qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
#2a
rdi_vec = c(21,26,52,75,13,21,54,12,23,31)
mean(rdi_vec)
sd(rdi_vec)
t_stat = (barx - 50)/ (sample_sd/ sqrt(n))
#test stat = -1.088843
t_stat
library(e1071)
#2a
rdi_vec = c(21,26,52,75,13,21,54,12,23,31)
mean(rdi_vec)
sd(rdi_vec)
n=10
barx = mean(rdi_vec)
sample_sd = sd(rdi_vec)
t_stat = (barx - 50)/ (sample_sd/ sqrt(n))
#test stat = -1.088843
t_stat
rdi_vec = c(21,26,52,75,13,21,54,12,23,31)
mean(rdi_vec)
sd(rdi_vec)
n=10
barx = mean(rdi_vec)
sample_sd = sd(rdi_vec)
t_stat = (barx - 50)/ (sample_sd/ sqrt(n))
#test stat = -1.088843
t_stat
#Critical value = 1.833113
-qt(0.05,9)
#p-value= P(t_9 > -1.833113) = 0.8477406
pt(-t_stat,9)
#2b
skewness(rdi_vec, type = 2)
#2c
#beta1 = r * sd(y) / sd(x)
sodium = c(418,516,1038,1502,262,419,1074,232,458,625)
mean(sodium)
sd(sodium)
fat = c(3,6,10,15,3,19,12,2,4,3)
mean(fat)
sd(fat)
r_coef = cor(sodium,fat)
r_coef
#2d
coles = c(3.48, 4.65, 3.81, 4.10, 4.89, 2.90, 4.33)
wws = c(4.10, 2.43 4.64, 2.56, 3.65, 4.82, 3.23)
#2d
coles = c(3.48, 4.65, 3.81, 4.10, 4.89, 2.90, 4.33)
wws = c(4.10, 2.43, 4.64, 2.56, 3.65, 4.82, 3.23)
#Pooled variance
var(wws) / var(coles)
#
sp2 = (6*var(coles) + 6*var(wws)) / 12
#
mean(wws) - mean(coles) - qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
mean(wws) - mean(coles) + qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
mean(coles); sd(coles)
mean(wws); sd(wws)
mean(coles) - mean(wws)
var(wws) / var(coles)
sp2
qt(0.95, 12)
mean(wws) - mean(coles) - qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7));mean(wws) - mean(coles) + qt(0.95, 12) * sqrt(sp2 * (1/7 + 1/7))
b1 - qt(0.975,df_res) * se_b1; b1 + qt(0.975,df_res) * se_b1;
b1 = 0.5540
se_b1 = 0.0242
df_res = 956
b1 - qt(0.975,df_res) * se_b1; b1 + qt(0.975,df_res) * se_b1;
yhat = b0 + b1 * xi
#
xi = -0.4864
b0 = -0.0552
b1 = 0.5540
MSE = 0.5764
yhat = b0 + b1 * xi
yhat
qt(0.975,df_res)
se = sqrt(MSE)
se
s2x = 1.0309
SSX = (df_res  + 1) * s2x
SSX
#
xi = -0.4864
b0 = -0.0552
b1 = 0.5540
MSE = 0.5764
s2x = 1.0309
barX = -0.1890
yhat = b0 + b1 * xi
yhat
qt(0.975,df_res)
se = sqrt(MSE)
se
SSX = (df_res  + 1) * s2x
SSX
hi = (1/(df_res + 2)) + (xi - barX)^2 / (SSX)
hi
yhat - qt(0.975,df_res) * se * sqrt(hi); yhat + qt(0.975,df_res) * se * sqrt(hi);
hi
qt(0.975,df_res)
yhat - qt(0.975,df_res) * se * sqrt(hi); yhat + qt(0.975,df_res) * se * sqrt(hi);
r_coef * sqrt(s2_current) / sqrt(s2_prof)
#
s2_current = 1.0309
s2_prof = 0.8922
r_coef = 0.5955
r_coef * sqrt(s2_current) / sqrt(s2_prof)
sqrt(s2_current)
sqrt(s2_current)
sqrt(s2_prof)
r_coef * sqrt(s2_current) / sqrt(s2_prof)
#
beta_vec = c(-0.4075,0.4908,-0.0604,0.0134,-0.0143,-0.0369,-0.04650.0334,0.0870)
#
beta_vec = c(-0.4075,0.4908,-0.0604,0.0134,-0.0143,-0.0369,-0.0465,0.0334,0.0870)
se_vec = c(0.1216,0.0269,0.0503,0.0040,0.0044,0.0309,0.0270,0.0298,0.0288)
t_vec = beta_vec / se_vec
order(abs(t_vec))
t_vec
abs(t_vec)
#
beta_vec = c(0.4908,-0.0604,0.0134,-0.0143,-0.0369,-0.0465,0.0334,0.0870)
se_vec = c(0.0269,0.0503,0.0040,0.0044,0.0309,0.0270,0.0298,0.0288)
t_vec = beta_vec / se_vec
order(abs(t_vec))
abs(t_vec)
abs(t_vec)[order(abs(t_vec))]
b1 = 0.6401
se_b1 = 0.0279
df_res = 956
b1 - qt(0.975,df_res) * se_b1; b1 + qt(0.975,df_res) * se_b1;
qt(0.975,df_res)
#
xi = -0.3480
b0 = -0.0866
b1 = 0.6401
MSE = 0.6660
s2x = 0.8922
barX = -0.1599
yhat = b0 + b1 * xi
se = sqrt(MSE)
SSX = (df_res  + 1) * s2x
SSX
hi = (1/(df_res + 2)) + (xi - barX)^2 / (SSX)
se
yhat
hi
qt(0.975,df_res)
yhat - qt(0.975,df_res) * se * sqrt(hi); yhat + qt(0.975,df_res) * se * sqrt(hi);
#
s2_current = 1.0309
qt(0.975,df_res)
#
s2_current = 1.0309
s2_prof = 0.8922
r_coef = 0.5955
sqrt(s2_current)
sqrt(s2_prof)
r_coef * sqrt(s2_prof) / sqrt(s2_current)
sqrt(s2_prof)
sqrt(s2_current)
#
beta_vec = c(-0.0042,0.5312,0.0089,-0.0037,0.0027,-0.1516,-0.0583,0.1293,0.0959)
se_vec = c(0.1273,0.0291,0.0524,0.0041,0.0046,0.0318,0.0281,0.0308,0.0299)
t_vec = beta_vec / se_vec
order(abs(t_vec))
t_vec[order(abs(t_vec))]
#
beta_vec = c(0.5312,0.0089,-0.0037,0.0027,-0.1516,-0.0583,0.1293,0.0959)
se_vec = c(0.0291,0.0524,0.0041,0.0046,0.0318,0.0281,0.0308,0.0299)
t_vec = beta_vec / se_vec
order(abs(t_vec))
t_vec[order(abs(t_vec))]
?fitme
?spaMM:fitme
?spaMM::fitme
?spaMM::Matern
?spaMM::MaternCorr
?spaMM::Matern.corr
?HLfit
library(spaMM)
?Matern
?corrplot
?corrplot::corrplot
?Chol
?chol
(0.1)^2 < (0.1)^3
(0.1)^2 <= (0.1)^3
(0.1)^(0.1) <= (0.2)^(0.1)
2.01/1.01
new_df_list
library(metaSEM)
library(geoR)
library(sf)
library(Matrix)
library(spaMM)
library(splines)
here::i_am("Simulation/Template_Simulation_Script.R")
setwd("~/Phd Research Project/SAR and Random Effect/Spatial misalignment R Codes/Github")
here::i_am("Simulation/Template_Simulation_Script.R")
setwd("~/Phd Research Project/SAR and Random Effect/Spatial misalignment R Codes/Github/Simulation")
here::i_am("Simulation/Template_Simulation_Script.R")
library(here)
source(here("Code","simulate_misaligned.R"))
source(here("Code","cnr.R"))
source(here("Code","bootstrap_cnr.R"))
source(here("Code","lnmr.R"))
here("Code","lnmr.R")
#File containing location data for the response and covariates, together with the lower triangular part of the great-circle distance matrix constructed based on all locations
load(here("simulation","sim_loc.Rdata"))
all_loc = rbind(sim_loc$x_loc,sim_loc$y_loc)
all_loc_sf = st_as_sf(all_loc, coords = c("lon", "lat"), crs = "WGS84", agr = "constant")
sim_dist_mat =  st_distance(all_loc_sf)
sim_dist_vec = sim_dist_mat[lower.tri(sim_dist_mat)] / 1000
sim_dist_vec = as.numeric(sim_dist_vec)
sim_dist_mat_y_x = as.matrix(st_distance(st_as_sf(sim_loc$y_loc, coords = c("lon", "lat"), crs = "WGS84", agr = "constant"),
st_as_sf(sim_loc$x_loc, coords = c("lon", "lat"), crs = "WGS84", agr = "constant"))
)
set.seed(201)
n_sim = 1
T_bootstrap = 2
#List to store simulation results for each run
simulation_list = vector("list", n_sim)
#Initialize true parameter values
K = 5
true_nu_vec_x = rep(0.5,K)
true_alpha_vec_x = rep(0.0015, K)
true_sigma2_vec_x = rep(1,K)
true_tau_vec_x = rep(0.15,K)
true_mu_vec_x = rep(0,K)
true_R <- outer(1:5, 1:5, FUN = "-") %>%
abs %>%
{0.5^{.}}
true_R[1,-1] = true_R[-1,1] = 0
true_R[2,-2] = true_R[-2,2] = 0
true_beta = c(2,1,0.5,1,0.5,1)
true_sigma2_rho = 0.2
true_nu_rho = 0.5
true_alpha_rho = 0.0015
true_tau_epsilon = 0.01
true_y_name = 'y'
true_x_name = paste0('X',1:K)
true_y_mean_model_formula = as.formula('~ X1 + X2 + X3 + X4 + X5')
for(s in 1:n_sim){
#Simulating Data
sim_data = simulate_misaligned(nu_vec_x = true_nu_vec_x, alpha_vec_x = true_alpha_vec_x, sigma2_vec_x = true_sigma2_vec_x, tau_vec_x = true_tau_vec_x, mu_vec_x = true_mu_vec_x, R_mat = true_R, beta_vec = true_beta, sigma2_rho = true_sigma2_rho, nu_rho = true_nu_rho, alpha_rho = true_alpha_rho, tau_epsilon = true_tau_epsilon, y_loc = sim_loc$y_loc, x_loc =  sim_loc$x_loc, y_name = true_y_name, x_name = true_x_name,
y_mean_model_formula =  true_y_mean_model_formula, spline_basis_list = NULL, cnr_step3_model_fit = NULL, gc_dist = TRUE,
bootstrap_use = FALSE, tchol_Sigma_mat = NULL, tchol_Sigma_err = NULL)
#Perform CNR
cnr_out = cnr(data_x = sim_data$data_x,
data_y = sim_data$data_y,
gc_dist = TRUE,
nu_vec_x = true_nu_vec_x,
dist_vec = sim_dist_vec,
y_name = true_y_name,
x_name = true_x_name,
loc_name = sim_data$loc_name,
slmm_formula = as.formula(paste(true_y_name,' ~ 1  +',
paste(true_x_name,collapse = '+'), ' + Matern(1|lon+lat)')),
nu_rho = true_nu_rho,
smooth_list = NULL, discretized_num = NULL, smooth_CI_level = NULL)
#Perform Preliminary Bootstrap
pre_bs = bootstrap_cnr(T_bootstrap = T_bootstrap, bootstrap_CI_level = 0.95, cnr_out = cnr_out, bootstrap_type = 'Prelim', pre_bs = NULL)
#Perform Second Bootstrap
second_bs = bootstrap_cnr(T_bootstrap = T_bootstrap, bootstrap_CI_level = 0.95, cnr_out = cnr_out, bootstrap_type = 'Second', pre_bs = pre_bs)
#Perform Independent Bootstrap
ind_bs = bootstrap_cnr(T_bootstrap = T_bootstrap, bootstrap_CI_level = 0.95, cnr_out = cnr_out, bootstrap_type = 'Ind', pre_bs = pre_bs)
#Perform l-NMR with l = 1,3,5
lnmr_L1 = lnmr(l = 1, dist_mat_y_x = sim_dist_mat_y_x,
data_x = sim_data$data_x,
data_y = sim_data$data_y,
gc_dist = TRUE,
dist_vec = sim_dist_vec,
y_name = true_y_name,
x_name = true_x_name,
loc_name = sim_data$loc_name,
slmm_formula = as.formula(paste(true_y_name,' ~ 1  +',
paste(true_x_name,collapse = '+'), ' + Matern(1|lon+lat)')),
nu_rho = true_nu_rho,
smooth_list = NULL, discretized_num = NULL, smooth_CI_level = NULL)
lnmr_L3 = lnmr(l = 3, dist_mat_y_x = sim_dist_mat_y_x,
data_x = sim_data$data_x,
data_y = sim_data$data_y,
gc_dist = TRUE,
dist_vec = sim_dist_vec,
y_name = true_y_name,
x_name = true_x_name,
loc_name = sim_data$loc_name,
slmm_formula = as.formula(paste(true_y_name,' ~ 1  +',
paste(true_x_name,collapse = '+'), ' + Matern(1|lon+lat)')),
nu_rho = true_nu_rho,
smooth_list = NULL, discretized_num = NULL, smooth_CI_level = NULL)
lnmr_L5 = lnmr(l = 5, dist_mat_y_x = sim_dist_mat_y_x,
data_x = sim_data$data_x,
data_y = sim_data$data_y,
gc_dist = TRUE,
dist_vec = sim_dist_vec,
y_name = true_y_name,
x_name = true_x_name,
loc_name = sim_data$loc_name,
slmm_formula = as.formula(paste(true_y_name,' ~ 1  +',
paste(true_x_name,collapse = '+'), ' + Matern(1|lon+lat)')),
nu_rho = true_nu_rho,
smooth_list = NULL, discretized_num = NULL, smooth_CI_level = NULL)
simulation_list[[s]] = list(
sim_data = sim_data, cnr_out = cnr_out, pre_bs = pre_bs, second_bs = second_bs, ind_bs = ind_bs, lnmr_L1 = lnmr_L1, lnmr_L3 = lnmr_L3, lnmr_L5 = lnmr_L5
)
}
##---------------------
#' ## Process simulation results and assess performance
##---------------------
sim_out = simulation_result(simulation_list_fake, true_beta = true_beta, true_sigma2_rho = true_sigma2_rho, true_alpha_rho = true_alpha_rho, true_tau_epsilon =  true_tau_epsilon)
sim_out$bias_beta_df
sim_out$rmse_beta_df
sim_out$ase_esd_ratio_df
sim_out$bias_theta_err_df
sim_out$rmse_theta_err_df
sim_out$beta_CI_coverage_df
sim_out$beta_CI_average_width_df
source(here("simulation","simulation_result.R"))
sim_out = simulation_result(simulation_list_fake, true_beta = true_beta, true_sigma2_rho = true_sigma2_rho, true_alpha_rho = true_alpha_rho, true_tau_epsilon =  true_tau_epsilon)
sim_out$bias_beta_df
sim_out$rmse_beta_df
sim_out$ase_esd_ratio_df
sim_out$bias_theta_err_df
sim_out$rmse_theta_err_df
sim_out$beta_CI_coverage_df
sim_out$beta_CI_average_width_df
##---------------------
#' ## Process simulation results and assess performance
##---------------------
sim_out = simulation_result(simulation_list, true_beta = true_beta, true_sigma2_rho = true_sigma2_rho, true_alpha_rho = true_alpha_rho, true_tau_epsilon =  true_tau_epsilon)
sim_out$bias_beta_df
sim_out$rmse_beta_df
sim_out$ase_esd_ratio_df
sim_out$bias_theta_err_df
sim_out$rmse_theta_err_df
sim_out$beta_CI_coverage_df
sim_out$beta_CI_average_width_df
sim_out$bias_beta_df
sim_out$rmse_beta_df
sim_out$ase_esd_ratio_df
sim_out$bias_theta_err_df
sim_out$rmse_theta_err_df
sim_out$beta_CI_coverage_df
sim_out$beta_CI_average_width_df
n_sim
sim_out$bias_beta_df
sim_out$rmse_beta_df
sim_out$ase_esd_ratio_df
sim_out$bias_theta_err_df
sim_out$rmse_theta_err_df
sim_out$beta_CI_coverage_df
sim_out$beta_CI_average_width_df
